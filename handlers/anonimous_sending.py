from aiogram import Bot, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message

from globals import CAN_SEE_USERS

router = Router()


class MessageStates(StatesGroup):
    send = State()


async def send_to(user_id: int, target_id: int, bot: Bot, state: FSMContext):
    msg = await bot.send_message(user_id,
                                 'üöÄ –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å <b>–∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b> —á–µ–ª–æ–≤–µ–∫—É, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª —ç—Ç—É —Å—Å—ã–ª–∫—É\n\n'
                                 'üñä <b>–ù–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ –≤—Å—ë, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –µ–º—É –ø–µ—Ä–µ–¥–∞—Ç—å,</b> –∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –æ–Ω –ø–æ–ª—É—á–∏—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ –±—É–¥–µ—Ç –∑–Ω–∞—Ç—å –æ—Ç –∫–æ–≥–æ\n\n'
                                 '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–∂–Ω–æ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, üí¨ —Ç–µ–∫—Å—Ç, üîä –≥–æ–ª–æ—Å–æ–≤—ã–µ, üì∑ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ä—É–∂–∫–∏), –∞ —Ç–∞–∫–∂–µ ‚ú® —Å—Ç–∏–∫–µ—Ä—ã',
                                 reply_markup=InlineKeyboardMarkup(
                                     inline_keyboard=[
                                         [InlineKeyboardButton(text='‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')]]))
    await state.set_state(MessageStates.send)
    await state.set_data({'user_id': target_id, 'message': msg})


@router.message(MessageStates.send)
async def send_state(message: Message, bot: Bot, state: FSMContext):
    await (await state.get_value('message')).delete()
    user_id = await state.get_value('user_id')
    await state.clear()
    await bot.send_message(message.from_user.id, '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç!',
                           reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                               [InlineKeyboardButton(text='–ù–∞–ø–∏—Å–∞—Ç—å –µ—â–µ ‚úçÔ∏è', callback_data=f'send;{user_id}')]]))

    text = 'üîî <b>–£ —Ç–µ–±—è –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>\n\n'
    if message.text:
        text += f'<blockquote>{message.text}</blockquote>\n\n'
    text += '‚Ü©Ô∏è <i>–°–≤–∞–π–ø–Ω–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.</i>'

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text='üöÆ –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è', callback_data='report')]])

    if user_id in CAN_SEE_USERS:
        text += f'\n\n–û—Ç {message.from_user.full_name}'
        if message.from_user.username:
            text += f' (@{message.from_user.username})'
        keyboard.inline_keyboard += [[InlineKeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å',
                                                           url=f'tg://user?id={message.from_user.id}')]]

    try:
        await bot.send_message(user_id, text, reply_markup=keyboard)
    except:
        pass


@router.callback_query(F.data.split(';')[0] == 'send')
async def send_callback(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await send_to(callback.from_user.id, int(callback.data.split(';')[1]), bot, state)
    await callback.answer()
